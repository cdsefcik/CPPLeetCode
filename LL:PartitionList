/*
Details:
The function partitionList takes an integer x as a parameter and modifies the current linked list in place according to the specified criteria. If the linked list is empty (i.e., head is null), the function should return immediately without making any changes.
Example 1:
Input:
Linked List: 3 -> 8 -> 5 -> 10 -> 2 -> 1 x: 5
Process:
Values less than 5: 3, 2, 1
Values greater than or equal to 5: 8, 5, 10
Output:
Linked List: 3 -> 2 -> 1 -> 8 -> 5 -> 10
xample 2:
Input:
Linked List: 1 -> 4 -> 3 -> 2 -> 5 -> 2 x: 3
Process:
Values less than 3: 1, 2, 2
Values greater than or equal to 3: 4, 3, 5
Output:
Linked List: 1 -> 2 -> 2 -> 4 -> 3 -> 5
*/

    
    void partitionList(int x) {
        if ((length == 0) || (length == 1)) {return;}

        Node* temp = head;
        Node* templesshead = nullptr;
        Node* templesstail = nullptr;
        Node* tempmorehead = nullptr;
        Node* tempmoretail = nullptr;

        
        while (temp != nullptr) {

            if (temp->value < x) {
                if (templesshead == nullptr) {
                    templesshead = temp;
                    templesstail = temp;
                    temp = temp->next;
                    templesshead->next = nullptr;
                    continue;
                }
               else {
                 templesstail->next = temp;
                 templesstail = temp;
                 temp = temp->next;
                 templesstail->next = nullptr;
                 continue;
                }
            }
            
            if (temp->value >= x) {
                if (tempmorehead == nullptr) {
                    tempmorehead = temp;
                    tempmoretail = temp;
                    temp = temp->next;
                    tempmorehead->next = nullptr;
                    continue;
                }
                else {
                    tempmoretail->next = temp;
                    tempmoretail = temp;
                    temp = temp->next;
                    tempmoretail->next = nullptr;
                    continue;
                }
            }
            
          
        }

        if((templesshead != nullptr) && (tempmorehead != nullptr)){
            templesstail->next = tempmorehead;
            head = templesshead;
        }

    
    }
