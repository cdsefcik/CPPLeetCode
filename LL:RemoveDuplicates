/*
Implement the removeDuplicates member function for the LinkedList class, which removes all duplicate values from a singly linked list.
The function should preserve the original order of the non-duplicate elements.
Note:  This linked list class does NOT have a tail which will make this method easier to implement.
Function Signature:
void removeDuplicates()
Example:
Consider the following singly linked list:
1 -> 2 -> 3 -> 2 -> 4 -> 5 -> 3 -> nullptr
For the given list, after calling the function ll.removeDuplicates(), the list should be modified to be:
1 -> 2 -> 3 -> 4 -> 5 -> nullptr
*/


void removeDuplicates()
{
    Node* temp = head;
    Node* prerunner;
    Node* runner;

    if ((length == 0) || (length == 1)) {
        return;
    }

    while (temp) {
        runner = temp->next;
        prerunner = temp;
        while (runner) {
            if (temp->value != runner->value) {
                runner = runner->next;
                prerunner = prerunner->next;
                continue;
            }
            else {
                prerunner->next = runner->next;
                runner->next = nullptr;
                delete runner;
                runner = prerunner->next;
                length--;
                continue;
            }

        }
        temp = temp->next;
    }

}
